import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get Like => "Curtir";
  String get about => "Sobre";
  String get actionCancel => "Cancelar";
  String get actionConfirm => "Confirmar";
  String get appName => "Estrutura de Dados";
  String get appUpdateActionDownloadAgain => "Download";
  String get appUpdateActionInstallApk => "Instalar";
  String get appUpdateActionUpdate => "Atualizar";
  String get appUpdateCheckUpdate => "Checar Atualizações";
  String get appUpdateDoubleBackTips =>
      "Pressione voltar novamente, cancelar download";
  String get appUpdateDownloadCanceled => "Download cancelado";
  String get appUpdateDownloadFailed => "Download falhou";
  String get appUpdateDownloading => "Downloading...";
  String get appUpdateLeastVersion => "Nova Versão Agora... ";
  String get appUpdateReDownloadContent =>
      "Foi detectado que já foi baixado, baixar novamente?";
  String get appUpdateUpdate => "Atualizar Versão";
  String get article_tag_top => "Top";
  String get autoBySystem => "Auto";
  String get clear => "Limpar";
  String get close => "Fechar";
  String get coin => "Coin";
  String get collectionRemove => "Remover";
  String get darkMode => "Dark Mode";
  String get favourites => "Favoritos";
  String get feedback => "FeedBack";
  String get fieldNotNull => "não está vazio";
  String get fontKuaiLe => "ZCOOL KuaiLe";
  String get githubIssue =>
      "Não foi possível encontrar o aplicativo de e-mail. Problemas no github";
  String get loadFailed => "Falha no carregamento, tente novamente mais tarde";
  String get logout => "Logout";
  String get myFavourites => "Meus Favoritos";
  String get needLogin => "Ir para o Login";
  String get noAccount => "Não tem conta ? ";
  String get openBrowser => "Abrir Navegador";
  String get password => "Por favor digite a senha";
  String get rate => "Avaliar";
  String get rePassword => "Confirmar a Senha";
  String get refresh => "Recarregar";
  String get refreshTwoLevel => "solte para entrar no segundo andar";
  String get retry => "Tentar Novamente";
  String get searchHistory => "Histórico";
  String get searchHot => "Hot";
  String get searchSuggest => "Pesquisar...";
  String get searchShake => "Mexer";
  String get setting => "Configurações";
  String get settingFont => "Fonte do sistema";
  String get settingLanguage => "Linguagem";
  String get share => "Compartilhar";
  String get signIn => "Fazer Login";
  String get signIn3thd => "Mais";
  String get welcome => "Bem vindo";
  String get signUp => "Fazer Login";
  String get splashSkip => "Próximo";
  String get tabSearch => "Pesquisar";
  String get searchResult => "Resultados da Busca:";
  String get tabMusic => "Músicas";
  String get tabFavorite => "Favoritos";
  String get tabUser => "Perfil";
  String get theme => "Tema";
  String get toSignIn => "Entrar";
  String get albums => "Categorias";
  String get viewAll => "Ver Tudo";
  String get forYou => "Pra você";
  String get toSignUp => "Sign Up";
  String get twoPwdDifferent => "As duas senhas não são iguais";
  String get unLike => "Descurtir";
  String get userName => "Por favor, digite o nome de usuário";
  String get viewStateButtonLogin => "Sign In";
  String get viewStateButtonRefresh => "Recarregar";
  String get viewStateButtonRetry => "Tentar novamente";
  String get viewStateMessageEmpty => "Nada foi encontrado";
  String get viewStateMessageError => "O Carregamento Falhou";
  String get viewStateMessageNetworkError =>
      "O Carregamento Falhou, Cheque sua conexão ";
  String get viewStateMessageUnAuth => "Não está logado";
  String get wechatAccount => "Wechat";
  String appUpdateFoundNewVersion(String version) => "Nova versão $version";
}

class $pt_br extends S {
  const $pt_br();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("pt", "BR"),
    ];
  }

  LocaleListResolutionCallback listResolution(
      {Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution(
      {Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "pt_br":
          S.current = const $pt_br();
          return SynchronousFuture<S>(S.current);
        case "pt_BR":
          S.current = const $pt_br();
          return SynchronousFuture<S>(S.current);
        default:
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported,
      bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry &&
            (supportedLocale.countryCode == null ||
                supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
    ? null
    : l.countryCode != null && l.countryCode.isEmpty
        ? l.languageCode
        : l.toString();
